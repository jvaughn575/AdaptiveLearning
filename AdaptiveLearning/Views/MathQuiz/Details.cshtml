@model AdaptiveLearning.Models.SavedMathQuiz

@{
    ViewData["Title"] = "Details";

}

<h2>Details</h2>

<div>
    <h4>SavedMathQuiz</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.questions)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.questions)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.created)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.created)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.UserID)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.UserID)
        </dd>
    </dl>
</div>

<div>
    <canvas id="myChart"></canvas> 
 <!--@*   <ul>

            @foreach (var result in Model.Results) {
             <li>
               <p>@result.points @result.secsperquestion @result.created</p>

             </li>
             }

    </ul> *@-->



</div>

<div>
    <!-- <a asp-action="Edit" asp-route-id="@Model.ID">Edit</a> | -->
    
    <a asp-action="Index">Back to List</a>
</div>


@section scripts{
    <script type="text/javascript">

        var datasets = [];
        var opacity = 1.0;
        var secsPerQuestion = [];
        var savedFirstResult = [];
        var index = 0;

        var count = 0;

        @{var isFirstResult = true;}


        @foreach (var op in Model.Results) {

            foreach (var secs in op.secsperquestion.Split(' '))
            {

                        @:secsPerQuestion.push("@secs.ToString()");


            }
            @*
            if (isFirstResult)
            {
                @:savedFirstResult = secsPerQuestion.slice();
                isFirstResult = false;
            }
            else
            {
               
                @:secsPerQuestion.forEach(function (currentValue, index) { secsPerQuestion[index] = (parseFloat(secsPerQuestion[index]) - parseFloat(savedFirstResult[index]) > 0 ? parseFloat(secsPerQuestion[index]) - parseFloat(savedFirstResult[index]) : parseFloat(savedFirstResult[index]) + (parseFloat(secsPerQuestion[index]) - parseFloat(savedFirstResult[index])) ).toString(); }); 
        }*@

            <text>

            datasets.push({
                label: "@Convert.ToString(op.created)",
                data: secsPerQuestion,
                backgroundColor: "rgba(55, 160, 225," + opacity + ")",
                hoverBackgroundColor: "rgba(155,160,225,0.7)",
                hoverBorderWidth: 2,
                HoverBorderColor: 'lightgrey'

            });
            secsPerQuestion = [];
            opacity -= 0.2;
            </text>


        }
        console.log("DATASETS", datasets);
        Charts.StackedResultBarChart(datasets);
        //Charts.StackedResultLineChart(datasets);


    </script>

}
